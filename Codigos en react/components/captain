import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from './ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { NotificationPanel } from './NotificationPanel';
import { CaptainAlerts } from './CaptainAlerts';
import { NotifyOrderButton } from './NotifyOrderButton';
import { ReportOrderModal } from './ReportOrderModal';
import { DelayAlertCard } from './DelayAlertCard';
import { 
  Users, 
  Clock, 
  TrendingUp, 
  AlertCircle, 
  CheckCircle,
  DollarSign,
  Receipt,
  TableProperties,
  ShieldCheck,
  Bell,
  LogOut,
  UserCheck,
  Settings,
  Calendar,
  BarChart3,
  Target,
  Eye,
  Coffee,
  Calculator,
  FileDown,
  Utensils
} from 'lucide-react';
import { useNotifications } from './NotificationContext';
import { CapitanIcon } from './RoleSpecificIcons';

// Datos mock para el Capitán
const mockSalesData = {
  todaySales: 3250,
  variation: '+12.5%',
  avgTicket: 135.42,
  totalOrders: 24
};

const mockRecentOrders = [
  {
    id: 'ORD-001',
    tableNumber: 5,
    status: 'preparando',
    total: 157.55,
    waiter: 'Juan Martínez',
    orderTime: new Date(Date.now() - 900000), // 15 min ago
    isTakeaway: false
  },
  {
    id: 'ORD-002',
    tableNumber: 3,
    status: 'listo',
    total: 145.95,
    waiter: 'María García',
    orderTime: new Date(Date.now() - 1200000), // 20 min ago
    isTakeaway: false
  },
  {
    id: 'ORD-003',
    tableNumber: null,
    status: 'listo_para_recoger',
    total: 89.50,
    waiter: 'Carlos López',
    orderTime: new Date(Date.now() - 1800000), // 30 min ago
    isTakeaway: true,
    customerName: 'Ana'
  }
];

const mockPendingBills = [
  {
    id: 'BILL-001',
    tableNumber: 5,
    total: 157.55,
    waiter: 'Juan Martínez',
    orderTime: new Date(Date.now() - 1800000),
    isTakeaway: false
  },
  {
    id: 'BILL-002',
    tableNumber: null,
    total: 145.95,
    waiter: 'María García',
    orderTime: new Date(Date.now() - 2400000),
    isTakeaway: true,
    customerName: 'Roberto'
  }
];

const mockTableStatus = [
  { number: 1, status: 'disponible', capacity: 4 },
  { number: 2, status: 'ocupada', capacity: 6 },
  { number: 3, status: 'cuenta', capacity: 4 },
  { number: 4, status: 'disponible', capacity: 2 },
  { number: 5, status: 'ocupada', capacity: 8 },
  { number: 6, status: 'reservada', capacity: 4 },
  { number: 7, status: 'disponible', capacity: 6 },
  { number: 8, status: 'servicio', capacity: 4 }
];

// Datos mock para alertas
const mockAlerts = [
  {
    id: 'alert-1',
    type: 'order_delayed',
    title: 'Orden ORD-001',
    message: 'Mesa 5 • tardó 25 min más de lo esperado',
    tableNumber: 5,
    orderNumber: 'ORD-001',
    minutes: 25,
    priority: 'high'
  },
  {
    id: 'alert-2',
    type: 'table_delayed',
    title: 'Mesa 3',
    message: 'Cuenta pendiente • 45 min sin cobrar',
    tableNumber: 3,
    minutes: 45,
    priority: 'medium'
  }
];

// Simplificar resumen de inventario
const mockInventorySummary = {
  totalItems: 156,
  lowStockCount: 4,
  criticalStockCount: 1,
  lastUpdate: new Date()
};

export function CaptainApp({ user, onLogout }) {
  const [notifications, setNotifications] = useState([]);
  const [alerts, setAlerts] = useState(mockAlerts);
  const [showReportModal, setShowReportModal] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [delayAlerts, setDelayAlerts] = useState([]);

  const formatElapsedTime = (orderTime) => {
    const elapsed = Math.floor((Date.now() - orderTime.getTime()) / 60000);
    return `${elapsed} min`;
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'disponible': return 'bg-green-100 text-green-800 border-green-300';
      case 'ocupada': return 'bg-red-100 text-red-800 border-red-300';
      case 'cuenta': return 'bg-orange-100 text-orange-800 border-orange-300';
      case 'reservada': return 'bg-blue-100 text-blue-800 border-blue-300';
      case 'servicio': return 'bg-gray-100 text-gray-800 border-gray-300';
      default: return 'bg-gray-100 text-gray-800 border-gray-300';
    }
  };

  const getOrderStatusColor = (status) => {
    switch (status) {
      case 'preparando': return 'bg-yellow-100 text-yellow-800 border-yellow-300';
      case 'listo': return 'bg-green-100 text-green-800 border-green-300';
      case 'entregado': return 'bg-blue-100 text-blue-800 border-blue-300';
      default: return 'bg-gray-100 text-gray-800 border-gray-300';
    }
  };

  const handleRequestCashierAction = (billId) => {
    const notification = {
      id: Date.now(),
      message: `Capitán solicita marcar como cobrado: ${billId}`,
      type: 'captain_request',
      timestamp: new Date()
    };
    
    setNotifications(prev => [...prev, notification]);
    alert('Solicitud enviada al cajero para marcar como cobrado');
  };

  const handleExportData = (type) => {
    alert(`Exportando datos de ${type} en formato CSV...`);
  };

  const handleAlertClick = (alertItem) => {
    if (alertItem.type === 'order_delayed') {
      // Navegar a la orden específica
      window.alert(`Abriendo orden ${alertItem.orderNumber} - Mesa ${alertItem.tableNumber}`);
    } else if (alertItem.type === 'table_delayed') {
      // Navegar a la cuenta de la mesa
      window.alert(`Abriendo cuenta de Mesa ${alertItem.tableNumber}`);
    }
  };

  const handleNotifyKitchen = async (orderId) => {
    const order = mockRecentOrders.find(o => o.id === orderId);
    if (!order) return;

    setSelectedOrder(order);
    setShowReportModal(true);
  };

  const handleReportSubmit = (reportData) => {
    if (!selectedOrder) return;

    // Crear alerta de demora para KDS
    const newAlert = {
      id: `alert-${Date.now()}`,
      type: reportData.type,
      orderId: selectedOrder.id,
      tableNumber: selectedOrder.tableNumber,
      isTakeaway: selectedOrder.isTakeaway,
      customerName: selectedOrder.customerName,
      reason: reportData.reason,
      reportedAt: new Date(),
      reportedBy: user.name,
      isRead: false
    };

    setDelayAlerts(prev => [...prev, newAlert]);

    // Mostrar confirmación
    alert(`Notificación enviada a Cocina — ${reportData.type.charAt(0).toUpperCase() + reportData.type.slice(1)}`);
    
    setSelectedOrder(null);
  };

  const handleViewAlertDetails = (alertItem) => {
    window.alert(`Detalles de ${alertItem.type}: ${alertItem.reason}`);
  };

  const handleMarkAlertAsRead = (alertId) => {
    setDelayAlerts(prev => 
      prev.map(alert => 
        alert.id === alertId ? { ...alert, isRead: true } : alert
      )
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50">
      {/* Header - Responsivo mejorado */}
      <header className="bg-white border-b border-purple-200 shadow-sm sticky top-0 z-50">
        <div className="px-3 sm:px-4 lg:px-6 py-3 sm:py-4 max-w-7xl mx-auto">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3 lg:gap-4">
              <CapitanIcon size={48} className="sm:h-12 sm:w-12 lg:h-16 lg:w-16" />
              <div>
                <h1 className="text-sm sm:text-base lg:text-lg font-medium text-purple-900">Panel de Capitán - Comandix</h1>
                <p className="text-xs sm:text-sm lg:text-base text-purple-700">{user.name} • Capitán</p>
              </div>
            </div>
            
            <div className="flex items-center gap-2 sm:gap-3 lg:gap-4">
              <Badge className="bg-purple-100 text-purple-800 border-purple-300 text-xs sm:text-sm px-2 py-1">
                <span className="hidden sm:inline">Solo lectura</span>
                <span className="sm:hidden">RO</span>
              </Badge>
              {notifications.length > 0 && (
                <Badge className="bg-orange-100 text-orange-800 border-orange-300 text-xs sm:text-sm px-2 py-1">
                  <Bell className="h-3 w-3 sm:h-4 sm:w-4 mr-1" />
                  {notifications.length}
                </Badge>
              )}
              <Button variant="outline" size="sm" onClick={onLogout} className="border-purple-300 p-2 sm:p-3">
                <LogOut className="h-3 w-3 sm:h-4 sm:w-4 lg:h-5 lg:w-5" />
                <span className="hidden lg:inline ml-2">Salir</span>
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="p-3 sm:p-4 lg:p-6 max-w-7xl mx-auto">
        {/* Estadísticas principales - Responsivo mejorado */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 lg:gap-5 mb-4 sm:mb-6 lg:mb-8">
          {/* Ventas del Día */}
          <Card className="border-purple-200">
            <CardContent className="p-3 sm:p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs sm:text-sm text-purple-700">Ventas del Día</p>
                  <p className="text-lg sm:text-2xl font-medium text-green-600">${mockSalesData.todaySales}</p>
                  <p className="text-xs text-green-600">{mockSalesData.variation}</p>
                </div>
                <TrendingUp className="h-6 w-6 sm:h-8 sm:w-8 text-purple-500" />
              </div>
            </CardContent>
          </Card>

          {/* Órdenes */}
          <Card className="border-purple-200">
            <CardContent className="p-3 sm:p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs sm:text-sm text-purple-700">Órdenes</p>
                  <p className="text-lg sm:text-2xl font-medium text-purple-800">{mockSalesData.totalOrders}</p>
                </div>
                <Receipt className="h-6 w-6 sm:h-8 sm:w-8 text-purple-500" />
              </div>
            </CardContent>
          </Card>

          {/* Ticket Promedio */}
          <Card className="border-purple-200">
            <CardContent className="p-3 sm:p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs sm:text-sm text-purple-700">Ticket Promedio</p>
                  <p className="text-lg sm:text-2xl font-medium text-amber-600">${mockSalesData.avgTicket}</p>
                </div>
                <Calculator className="h-6 w-6 sm:h-8 sm:w-8 text-purple-500" />
              </div>
            </CardContent>
          </Card>

          {/* Cuentas por Cobrar */}
          <Card className="border-purple-200">
            <CardContent className="p-3 sm:p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs sm:text-sm text-purple-700">Por Cobrar</p>
                  <p className="text-lg sm:text-2xl font-medium text-red-600">
                    ${mockPendingBills.reduce((sum, bill) => sum + bill.total, 0).toFixed(2)}
                  </p>
                </div>
                <AlertCircle className="h-6 w-6 sm:h-8 sm:w-8 text-purple-500" />
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
          {/* Alertas del Capitán */}
          <div className="lg:col-span-2">
            <CaptainAlerts alerts={alerts} onAlertClick={handleAlertClick} />
          </div>

          {/* Órdenes Recientes */}
          <Card className="border-purple-200">
            <CardHeader>
              <CardTitle className="flex items-center justify-between text-purple-900">
                <span>Órdenes Recientes</span>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => handleExportData('órdenes')}
                  className="border-purple-300 text-purple-700"
                >
                  <FileDown className="h-3 w-3 mr-1" />
                  Exportar
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {mockRecentOrders.map(order => (
                <div key={order.id} className="p-3 border border-purple-200 rounded-lg bg-purple-50">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2 flex-wrap">
                      {order.isTakeaway ? (
                        <Badge className="bg-blue-100 text-blue-800 border-blue-300">
                          📦 Para llevar
                        </Badge>
                      ) : (
                        <Badge className="bg-blue-100 text-blue-800 border-blue-300">
                          Mesa {order.tableNumber}
                        </Badge>
                      )}
                      <Badge className={getOrderStatusColor(order.status)}>
                        {order.status.replace('_', ' ').toUpperCase()}
                      </Badge>
                    </div>
                    <div className="text-right">
                      <div className="font-medium text-purple-900">${order.total.toFixed(2)}</div>
                      <div className="text-xs text-purple-600">
                        {formatElapsedTime(order.orderTime)}
                      </div>
                    </div>
                  </div>
                  <div className="text-sm text-purple-700">
                    {order.isTakeaway ? (
                      <div>Cliente: {order.customerName} • Mesero: {order.waiter}</div>
                    ) : (
                      <div>Mesero: {order.waiter}</div>
                    )}
                  </div>
                  <div className="mt-2">
                    <NotifyOrderButton 
                      orderId={order.id}
                      onNotify={handleNotifyKitchen}
                      size="sm"
                      variant="outline"
                    />
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Cuentas por Cobrar */}
          <Card className="border-purple-200">
            <CardHeader>
              <CardTitle className="flex items-center justify-between text-purple-900">
                <span>Cuentas por Cobrar</span>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => handleExportData('cuentas por cobrar')}
                  className="border-purple-300 text-purple-700"
                >
                  <FileDown className="h-3 w-3 mr-1" />
                  Exportar
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {mockPendingBills.map(bill => (
                <div key={bill.id} className="p-3 border border-purple-200 rounded-lg bg-purple-50">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      {bill.isTakeaway ? (
                        <Badge className="bg-blue-100 text-blue-800 border-blue-300">
                          📦 Para llevar
                        </Badge>
                      ) : (
                        <Badge className="bg-red-100 text-red-800 border-red-300">
                          Mesa {bill.tableNumber}
                        </Badge>
                      )}
                      <span className="text-sm text-purple-700">{bill.id}</span>
                    </div>
                    <div className="text-right">
                      <div className="font-medium text-purple-900">${bill.total.toFixed(2)}</div>
                      <div className="text-xs text-purple-600">
                        {formatElapsedTime(bill.orderTime)}
                      </div>
                    </div>
                  </div>
                  <div className="text-sm text-purple-700">
                    {bill.isTakeaway ? (
                      <div>Cliente: {bill.customerName} • Mesero: {bill.waiter}</div>
                    ) : (
                      <div>Mesero: {bill.waiter}</div>
                    )}
                  </div>
                  <div className="mt-2">
                    <NotifyOrderButton 
                      orderId={bill.id}
                      onNotify={handleNotifyKitchen}
                      size="sm"
                      variant="outline"
                    />
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Estado de Mesas */}
          <Card className="border-purple-200">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-purple-900">
                <Utensils className="h-4 w-4" />
                Estado de Mesas
                <Badge className="bg-purple-100 text-purple-800 border-purple-300 text-xs">
                  Solo lectura (Capitán)
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 sm:grid-cols-4 gap-2">
                {mockTableStatus.map(table => (
                  <div 
                    key={table.number} 
                    className="p-2 border border-purple-200 rounded text-center"
                  >
                    <div className="text-sm font-medium text-purple-900">Mesa {table.number}</div>
                    <Badge className={`text-xs ${getStatusColor(table.status)}`}>
                      {table.status}
                    </Badge>
                    <div className="text-xs text-purple-600 mt-1">
                      {table.capacity} pers.
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Alertas de Demora/Cancelación/Cambio */}
        {delayAlerts.length > 0 && (
          <Card className="border-amber-200 mt-6">
            <CardHeader>
              <CardTitle className="text-amber-900">Alertas de Cocina</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {delayAlerts.map(alert => (
                <DelayAlertCard
                  key={alert.id}
                  alert={alert}
                  onViewDetails={handleViewAlertDetails}
                  onMarkAsRead={handleMarkAlertAsRead}
                />
              ))}
            </CardContent>
          </Card>
        )}

        {/* Modal de Reporte */}
        <ReportOrderModal
          isOpen={showReportModal}
          onClose={() => {
            setShowReportModal(false);
            setSelectedOrder(null);
          }}
          onSubmit={handleReportSubmit}
          orderId={selectedOrder?.id || ''}
          tableNumber={selectedOrder?.tableNumber}
          isTakeaway={selectedOrder?.isTakeaway}
          customerName={selectedOrder?.customerName}
        />
      </div>
    </div>
  );
}